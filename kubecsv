#!/bin/bash
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# HOW TO:
# curl -fL -H 'Cache-Control: no-cache, no-store' https://raw.githubusercontent.com/alrokayan/kubecsv/main/kubecsv | bash -s -- deploy.csv Asia/Riyadh ~/.kube/config
# $1 csv file
# $2 Time Zone
# $3 kubeconfig path
if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
  echo "Usage: $0 <CSV file> <Time Zone> <Kubeconfig file>"
  echo "EXAMPLE: $0 deploy.csv Asia/Riyadh ~/.kube/config"
  echo "NOTE: <CSV file> will be created with an example if it does not exist"
  if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    echo "This script will deploy applications from a CSV file"
    exit 0
  fi
  exit 1
fi
export CSV_FILE="$1"
export TZ="$2"
export KUBECONFIG_FILE="$3"
if [ "$CSV_FILE" == "" ]; then CSV_FILE="deploy.csv"; fi
if [ "$TZ" == "" ]; then TZ="Asia/Riyadh"; fi
if [ "$KUBECONFIG_FILE" == "" ]; then KUBECONFIG_FILE=$KUBECONFIG; fi
if ! [ -f "$CSV_FILE" ]; then
  echo "CSV file could not be found"
  exit 1
fi
if ! [ -f "$KUBECONFIG_FILE" ]; then
  echo "kubeconfig file could not be found"
  exit 1
fi

#######################################
#######################################
### FUNCTION deploycsvFileCreation #######
#######################################
#######################################
function deploycsvFileCreation() {
  CSV_MASTER_NIC_DEFAULT="eth0"
  CSV_NFS_SERVER_DEFAULT="10.0.0.1"
  CSV_NFS_PATH_DEFAULT="/mnt/kube-volumes"
  CSV_LARGE_NFS_PATH_DEFAULT="/mnt/hdd"
  CSV_IP_DEFAULT=10.99.0.50
  CSV_CIDR_DEFAULT=24
  CSV_GW_DEFAULT=10.99.0.1
  CSV_DNS1_DEFAULT=1.1.1.1
  CSV_DNS2_DEFAULT=8.8.8.8

  if [ ! -f "$CSV_FILE" ]; then
    if $CONTINUE; then
      unset READ_VAR_ASK
    else
      READ_VAR_ASK=1
    fi
    readVar CSV_MASTER_NIC "$CSV_MASTER_NIC_DEFAULT" "What's your default network interface (run \"ip a\" in the master node to get the list)?" $READ_VAR_ASK
    readVar CSV_NFS_SERVER "$CSV_NFS_SERVER_DEFAULT" "What's your NFS server?" $READ_VAR_ASK
    readVar CSV_NFS_PATH "$CSV_NFS_PATH_DEFAULT" "What's the NFS server's path where all volumes are?" $READ_VAR_ASK
    readVar CSV_LARGE_NFS_PATH "$CSV_LARGE_NFS_PATH_DEFAULT" "What's the NFS server's path where all large files (media and downloads) are?" $READ_VAR_ASK
    readVar CSV_IP "$CSV_IP_DEFAULT" "Give example of a valid local IP?" $READ_VAR_ASK
    readVar CSV_CIDR "$CSV_CIDR_DEFAULT" "What's the CIDR suffex for $CSV_IP?" $READ_VAR_ASK
    export CSV_CIDR="${CSV_CIDR//$'/'/}"
    readVar CSV_GW "$CSV_GW_DEFAULT" "What's the gateway for $CSV_IP?" $READ_VAR_ASK
    readVar CSV_DNS1 "$DNS1" "What's the DNS1 for $CSV_IP?" $READ_VAR_ASK
    readVar CSV_DNS2 "$DNS2" "hat's the DNS2 for $CSV_IP?" $READ_VAR_ASK
    if [ "$CSV_MASTER_NIC" == "" ]; then CSV_MASTER_NIC=$CSV_MASTER_NIC_DEFAULT; fi
    if [ "$CSV_LARGE_NFS_PATH" == "" ]; then CSV_LARGE_NFS_PATH=$CSV_LARGE_NFS_PATH_DEFAULT; fi
    if [ "$CSV_NFS_SERVER" == "" ]; then CSV_NFS_SERVER=$CSV_NFS_SERVER_DEFAULT; fi
    if [ "$CSV_NFS_PATH" == "" ]; then CSV_NFS_PATH=$CSV_NFS_PATH_DEFAULT; fi
    if [ "$CSV_IP" == "" ]; then CSV_IP=$CSV_IP_DEFAULT; fi
    if [ "$CSV_CIDR" == "" ]; then CSV_CIDR=$CSV_CIDR_DEFAULT; fi
    if [ "$CSV_GW" == "" ]; then CSV_GW=$CSV_GW_DEFAULT; fi
    if [ "$CSV_DNS1" == "" ]; then CSV_DNS1=$CSV_DNS1_DEFAULT; fi
    if [ "$CSV_DNS2" == "" ]; then CSV_DNS2=$CSV_DNS2_DEFAULT; fi
    cat <<EOF >"$CSV_FILE"
app_name,helm_truechart,storage_name,storage_enabled,storage_path,storage_subPath,storage_server,storage_type,storage_mountPath,nw_master_nic,nw_mac,nw_address_with_subnet,nw_gateway,nw_dns1,nw_dns2,run_as_user,run_as_group,privileged,extra_helm_values
plex,plex,config,true,$CSV_NFS_PATH/plex,config,$CSV_NFS_SERVER,nfs,/config,,,,,,,,,,
plex,plex,movies,true,$CSV_LARGE_NFS_PATH/Media,Movies,$CSV_NFS_SERVER,nfs,/Movies,,,,,,,,,,
plex,plex,tv,true,$CSV_LARGE_NFS_PATH/Media,TV,$CSV_NFS_SERVER,nfs,/TV,$CSV_MASTER_NIC,,$(NEXT_IP "$CSV_IP" 1)/$CSV_CIDR,$CSV_GW,$CSV_DNS1,$CSV_DNS2,0,0,true,
radarr,radarr,config,true,$CSV_NFS_PATH/radarr,config,$CSV_NFS_SERVER,nfs,/config,,,,,,,,,,
radarr,radarr,movies,true,$CSV_LARGE_NFS_PATH/Media,Movies,$CSV_NFS_SERVER,nfs,/movies,,,,,,,,,,
radarr,radarr,downloads,true,$CSV_LARGE_NFS_PATH/Downloads,,$CSV_NFS_SERVER,nfs,/downloads,$CSV_MASTER_NIC,$(printf '00:2F:60:%02X:%02X:%02X\n' "$(shuf -i 0-99 -n 1)" "$(shuf -i 101-199 -n 1)" "$(shuf -i 201-256 -n 1)"),,,,,0,0,true,
sonarr,sonarr,config,true,$CSV_NFS_PATH/sonarr,config,$CSV_NFS_SERVER,nfs,/config,,,,,,,,,,
sonarr,sonarr,tv,true,$CSV_LARGE_NFS_PATH/Media,TV,$CSV_NFS_SERVER,nfs,/tv,,,,,,,,,,
sonarr,sonarr,downloads,true,$CSV_LARGE_NFS_PATH/Downloads,,$CSV_NFS_SERVER,nfs,/downloads,$CSV_MASTER_NIC,$(printf '00:2F:60:%02X:%02X:%02X\n' "$(shuf -i 0-99 -n 1)" "$(shuf -i 101-199 -n 1)" "$(shuf -i 201-256 -n 1)"),,,,,0,0,true,
sabnzbd,sabnzbd,config,true,$CSV_NFS_PATH/sabnzbd,config,$CSV_NFS_SERVER,nfs,/config,,,,,,,,,,
sabnzbd,sabnzbd,downloads,true,$CSV_LARGE_NFS_PATH/Downloads,,$CSV_NFS_SERVER,nfs,/downloads,$CSV_MASTER_NIC,$(printf '00:2F:60:%02X:%02X:%02X\n' "$(shuf -i 0-99 -n 1)" "$(shuf -i 101-199 -n 1)" "$(shuf -i 201-256 -n 1)"),,,,,0,0,true,
overseerr,overseerr,config,true,$CSV_NFS_PATH/overseerr,config,$CSV_NFS_SERVER,nfs,/app/config,$CSV_MASTER_NIC,$(printf '00:2F:60:%02X:%02X:%02X\n' "$(shuf -i 0-99 -n 1)" "$(shuf -i 101-199 -n 1)" "$(shuf -i 201-256 -n 1)"),,,,,0,0,true,
code-server,code-server,config,true,$CSV_NFS_PATH/code-server,config,$CSV_NFS_SERVER,nfs,/config,$CSV_MASTER_NIC,,$(NEXT_IP "$CSV_IP" 1)/$CSV_CIDR,$CSV_GW,$CSV_DNS1,$CSV_DNS2,0,0,true,
netbootxyz,netbootxyz,config,true,$CSV_NFS_PATH/netbootxyz,config,$CSV_NFS_SERVER,nfs,/config,,,,,,,,,,
netbootxyz,netbootxyz,assets,true,$CSV_NFS_PATH/netbootxyz,assets,$CSV_NFS_SERVER,nfs,/assets,$CSV_MASTER_NIC,,$(NEXT_IP "$CSV_IP "2)/$CSV_CIDR,$CSV_GW,$CSV_DNS1,$CSV_DNS2,0,0,true,
homepage,homepage,config,true,$CSV_NFS_PATH/homepage,config,$CSV_NFS_SERVER,nfs,/app/config,$CSV_MASTER_NIC,,$(NEXT_IP "$CSV_IP" 3)/$CSV_CIDR,$CSV_GW,$CSV_DNS1,$CSV_DNS2,,,,
home-assistant,home-assistant,config,true,$CSV_NFS_PATH/home-assistant,config,$CSV_NFS_SERVER,nfs,/config,$CSV_MASTER_NIC,,$(NEXT_IP "$CSV_IP" 4)/$CSV_CIDR,$CSV_GW,$CSV_DNS1,$CSV_DNS2,0,0,true,--set cnpg.main.enabled=false --set configmap.init.enabled=false --set persistence.init.enabled=false --set workload.main.podSpec.initContainers.init.enabled=false
mosquitto,mosquitto,data,true,$CSV_NFS_PATH/mosquitto,data,$CSV_NFS_SERVER,nfs,/mosquitto/data,,,,,,,,,,
mosquitto,mosquitto,mosquitto-config,false,,,,,,,,,,,,,,,
mosquitto,mosquitto,configinc,false,,,,,,,,,,,,,,,
mosquitto,mosquitto,config,true,$CSV_NFS_PATH/mosquitto,config,$CSV_NFS_SERVER,nfs,/mosquitto/config,$CSV_MASTER_NIC,,$(NEXT_IP "$CSV_IP" 5)/$CSV_CIDR,$CSV_GW,$CSV_DNS1,$CSV_DNS2,,,,
zigbee2mqtt,zigbee2mqtt,data,true,$CSV_NFS_PATH/zigbee2mqtt,data,$CSV_NFS_SERVER,nfs,/data,$CSV_MASTER_NIC,,$(NEXT_IP "$CSV_IP" 6)/$CSV_CIDR,$CSV_GW,$CSV_DNS1,$CSV_DNS2,0,0,true,--set workload.main.podSpec.initContainers.init-config.enabled=false --set containers.main.env.USE_CUSTOM_CONFIG_FILE=true
node-red,node-red,data,true,$CSV_NFS_PATH/node-red,data,$CSV_NFS_SERVER,nfs,/data,$CSV_MASTER_NIC,,$(NEXT_IP "$CSV_IP" 7)/$CSV_CIDR,$CSV_GW,$CSV_DNS1,$CSV_DNS2,0,0,true,
EOF
  fi
}

#######################################
#######################################
# FUNCTION createNetworkAttachmentDefinition_STATIC
#######################################
#######################################
function createNetworkAttachmentDefinition_STATIC() {
  cat <<EOF | kubectl --kubeconfig "$KUBECONFIG_FILE" create -f -
apiVersion: "k8s.cni.cncf.io/v1"
kind: NetworkAttachmentDefinition
metadata:
  name: $BRIDGE_NAME
  namespace: $APP_NAMESPACE
spec:
  config: '{
      "cniVersion": "1.0.0",
      "name": "$BRIDGE_NAME",
      "plugins": [
        {
          "cniVersion": "1.0.0",
          "type": "macvlan",
          "mode": "bridge",
          "mac": "$MAC",
          "master": "$MASTER_NIC",
          "isDefaultGateway": true,
          "enableIPv6": false,
          "ipam": {
            "type": "static",
            "addresses":
            [
              {
                "address": "$IPCIDR", 
                "gateway": "$GW"
              }
            ],
            "routes":
            [
              {
                "dst": "0.0.0.0/0"
              }
            ]
          },
          "dns":
          {
            "nameservers":
            [
              "$DNS1",
              "$DNS2" 
            ]
          }
        },
        {
          "type": "portmap",
          "capabilities": {
            "portMappings": true
          },
          "snat": true
        },
        {
          "capabilities": { "mac": true },
          "type": "tuning"
        }
      ]
    }'
EOF
}

#######################################
#######################################
# FUNCTION createNetworkAttachmentDefinition_DHCP
#######################################
#######################################
function createNetworkAttachmentDefinition_DHCP() {
  cat <<EOF | kubectl --kubeconfig "$KUBECONFIG_FILE" create -f -
apiVersion: "k8s.cni.cncf.io/v1"
kind: NetworkAttachmentDefinition
metadata:
  name: $BRIDGE_NAME
  namespace: $APP_NAMESPACE
spec:
  config: '{
      "cniVersion": "1.0.0",
      "name": "$BRIDGE_NAME",
      "plugins": [
        {
          "cniVersion": "1.0.0",
          "type": "macvlan",
          "mode": "bridge",
          "mac": "$MAC",
          "master": "$MASTER_NIC",
          "isDefaultGateway": true,
          "enableIPv6": false,
          "ipam": {
            "type": "dhcp",
            "routes":
            [
              {
                "dst": "0.0.0.0/0"
              }
            ],
            "daemonSocketPath": "/run/cni/dhcp.sock",
            "request": [
              {
                  "skipDefault": false
              }
            ],
            "provide": [
              {
                "option": "host-name",
                "fromArg": "k8s-$APP_NAMESPACE"
              }
            ]
          },
          "dns":
          {
            "nameservers":
            [
              "$DNS1",
              "$DNS2"
            ]
          }
        },
        {
          "type": "portmap",
          "capabilities": {
            "portMappings": true
          },
          "snat": true
        },
        {
          "capabilities": { "mac": true },
          "type": "tuning"
        }
      ]
    }'
EOF
}

#######################################
#######################################
########## FUNCTION deployAPP #########
#######################################
#######################################
function deployAPP() {
  if [ "$GW" == "" ]; then
    VALUES+="--set 'workload.main.podSpec.annotations.k8s\.v1\.cni\.cncf\.io/networks=$NETWORK_ANNOTATION' --set common.TZ=$TZ"
  else
    VALUES+="--set 'workload.main.podSpec.annotations.k8s\.v1\.cni\.cncf\.io/networks=[$NETWORK_ANNOTATION]' --set common.TZ=$TZ"
  fi
  VALUES="${VALUES//$'\r'/}"
  echo "csv raw $((j - 1)) -- $CURRENT_APP: Deploying .."
  echo -n "-- kubecsv added the following values: "
  echo "${VALUES//--set/$'\n# --set'}"
  NEW_APP_RAW=true
  APP_NAMESPACE="app-$CURRENT_APP"
  CMD="helm --kubeconfig $KUBECONFIG_FILE upgrade --install $CURRENT_APP --namespace $APP_NAMESPACE --create-namespace oci://tccr.io/truecharts/$CURRENT_HELM_CHART $VALUES"
  echo "-- Running command: $CMD"
  eval "$CMD"
  unset VALUES
  unset NETWORK_ANNOTATION
  echo
  echo "============================================="
}

#######################################
#######################################
######## FUNCTION binInstall ##########
#######################################
#######################################
function binInstall() {
  if [[ "$(uname -s)" == *"Linux"* ]]; then
    echo "-- OS: Linux - CHECKING BINARIES"
    if ! command -v helm &>/dev/null; then
      curl -L https://get.helm.sh/helm-v3.15.2-linux-"$(dpkg --print-architecture)".tar.gz -o tmp/helm.tar.gz
      tar -zxf tmp/helm.tar.gz -C tmp
      sudo mv tmp/linux-"$(dpkg --print-architecture)"/helm /usr/local/bin/
      sudo chmod +x /usr/local/bin
      if command -v helm &>/dev/null; then echo "-- helm installed successfully"; fi
    fi
    if ! command -v kubectl &>/dev/null; then
      sudo curl -L "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/$(dpkg --print-architecture)/kubectl" -o /usr/local/bin/kubectl
      sudo chmod +x /usr/local/bin/kubectl
      if command -v kubectl &>/dev/null; then echo "-- kubectl installed successfully"; fi
    fi
  fi
  if [[ "$(uname -s)" == *"Darwin"* ]]; then
    echo "-- OS: macOS - CHECKING BINARIES"
    if ! command -v helm &>/dev/null; then
      curl -L "https://get.helm.sh/helm-v3.15.2-darwin-$(arch).tar.gz" -o tmp/helm.tar.gz
      tar -zxf tmp/helm.tar.gz -C tmp
      sudo mv tmp/darwin-"$(arch)"/helm /usr/local/bin/
      sudo chmod +x /usr/local/bin/helm
      if command -v helm &>/dev/null; then echo "-- helm installed successfully"; fi
    fi
    if ! command -v kubectl &>/dev/null; then
      sudo curl -L "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/darwin/$(arch)/kubectl" -o /usr/local/bin/kubectl
      sudo chmod +x /usr/local/bin/kubectl
      if command -v kubectl &>/dev/null; then echo "-- kubectl installed successfully"; fi
    fi
  fi
  helm version
  kubectl version --client=true
}
##############################################################################
binInstall
if ! [ -f "$CSV_FILE" ]; then
  deploycsvFileCreation
  exit 0
fi
NEW_APP_RAW=true
j=1
while IFS="," read -r app_name helm_truechart storage_name storage_enabled storage_path storage_subPath storage_server storage_type storage_mountPath nw_master_nic nw_mac nw_address_with_subnet nw_gateway nw_dns1 nw_dns2 run_as_user run_as_group privileged extra_helm_values; do
  if ((j > 1)) && [ "$app_name" != "$CURRENT_APP" ]; then
    deployAPP
  fi
  CURRENT_APP="$app_name"
  CURRENT_HELM_CHART="$helm_truechart"
  APP_NAMESPACE="app-$CURRENT_APP"
  if $NEW_APP_RAW; then
    echo "csv raw $j -- $app_name: Building values  .."
    kubectl --kubeconfig "$KUBECONFIG_FILE" create ns "$APP_NAMESPACE"
    NEW_APP_RAW=false
  fi
  if [ "$storage_name" != "" ]; then
    echo "csv raw $j -- $app_name: Adding storage configuration \"$storage_name\" to the values .."
    if [ "$storage_enabled" != "" ]; then
      VALUES+="--set persistence.$storage_name.enabled=$storage_enabled "
    fi
    if [ "$storage_path" != "" ]; then
      VALUES+="--set persistence.$storage_name.path=\"$storage_path\" "
    fi
    if [ "$storage_subPath" != "" ]; then
      VALUES+="--set persistence.$storage_name.subPath=\"$storage_subPath\" "
    fi
    if [ "$storage_server" != "" ]; then
      VALUES+="--set persistence.$storage_name.server=\"$storage_server\" "
    fi
    if [ "$storage_type" != "" ]; then
      VALUES+="--set persistence.$storage_name.type=\"$storage_type\" "
    fi
    if [ "$storage_mountPath" != "" ]; then
      VALUES+="--set persistence.$storage_name.mountPath=\"$storage_mountPath\" "
    fi
  fi
  if [ "$nw_master_nic" != "" ]; then
    echo "csv raw $j -- $app_name: Adding dnsPolicy=ClusterFirstWithHostNet to the values .."
    VALUES+="--set podOptions.dnsPolicy=ClusterFirstWithHostNet "
    MAC=$nw_mac
    MAC_REGEX="^([a-fA-F0-9]{2}:){5}[a-fA-F0-9]{2}$"
    if ! [[ $MAC =~ $MAC_REGEX ]]; then MAC="$(printf '00:2F:60:%02X:%02X:%02X\n' "$(shuf -i 0-99 -n 1)" "$(shuf -i 101-199 -n 1)" "$(shuf -i 201-256 -n 1)")"; fi
    export MASTER_NIC="$nw_master_nic"
    export BRIDGE_NAME=cbr-${nw_master_nic//@/-}
    export APP_NAMESPACE
    export MAC
    export DNS1=$nw_dns1
    export DNS2=$nw_dns2
    export GW=$nw_gateway
    export IPCIDR=$nw_address_with_subnet
    IP=$(echo "$IPCIDR" | cut -d'/' -f1)
    kubectl --kubeconfig "$KUBECONFIG_FILE" delete network-attachment-definitions.k8s.cni.cncf.io "$BRIDGE_NAME" -n "$APP_NAMESPACE"
    if [[ $IP =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
      echo "csv raw $j -- $app_name: Adding STATIC IP ($nw_address_with_subnet) ($MAC) network configuration $nw_master_nic to the values .."
      createNetworkAttachmentDefinition_STATIC
    else
      echo "csv raw $j -- $app_name: Adding DHCP ($MAC) network configuration $nw_master_nic to the values .."
      createNetworkAttachmentDefinition_DHCP
    fi
    if [ "$GW" == "" ]; then
      if [ "$NETWORK_ANNOTATION" == "" ]; then
        NETWORK_ANNOTATION="$BRIDGE_NAME"
      else
        NETWORK_ANNOTATION+="\,$BRIDGE_NAME"
      fi
    else
      if [ "$NETWORK_ANNOTATION" == "" ]; then
        NETWORK_ANNOTATION="{\"name\": \"$BRIDGE_NAME\"\,\"default-route\": [\"$GW\"]}"
      else
        NETWORK_ANNOTATION+=",{\"name\": \"$BRIDGE_NAME\"\,\"default-route\": [\"$GW\"]}"
      fi
    fi
    if [ "$DNS1" != "" ]; then
      echo "csv raw $j -- $app_name: Adding DNS1=$DNS1 to the values .."
      VALUES+="--set workload.main.podSpec.dnsConfig.nameservers[0]=\"$DNS1\" "
    fi
    if [ "$DNS2" != "" ]; then
      echo "csv raw $j -- $app_name: Adding DNS2=$DNS2 to the values .."
      VALUES+="--set workload.main.podSpec.dnsConfig.nameservers[1]=\"$DNS2\" "
    fi
  fi
  if [ "$run_as_user" != "" ]; then
    echo "csv raw $j -- $app_name: Adding runAsUser: $run_as_user to the values .."
    VALUES+="--set securityContext.container.runAsUser=$run_as_user "
    VALUES+="--set securityContext.container.PUID=$run_as_user "
  fi
  if [ "$run_as_group" != "" ]; then
    echo "csv raw $j -- $app_name: Adding runAsGroup: $run_as_group to the values .."
    VALUES+="--set securityContext.container.runAsGroup=$run_as_group "
    VALUES+="--set securityContext.pod.fsGroup=$run_as_group "
  fi
  if [ "$privileged" != "" ]; then
    echo "csv raw $j -- $app_name: Adding privileged: $privileged to the values .."
    VALUES+="--set securityContext.container.privileged=$privileged "
    VALUES+="--set securityContext.container.UMASK=000 "
    VALUES+="--set securityContext.container.runAsNonRoot=false "
    VALUES+="--set securityContext.container.readOnlyRootFilesystem=false "
  fi
  if [ "$extra_helm_values" != "" ]; then
    echo "csv raw $j -- $app_name: Adding extra values: $extra_helm_values .."
    VALUES+="$extra_helm_values "
  fi
  j=$((j + 1))
done < <(tail -n +2 "$1")
deployAPP
